<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Announcement | Confluent Japan Community</title><link>https://confluent-jp.github.io/community/category/announcement/</link><atom:link href="https://confluent-jp.github.io/community/category/announcement/index.xml" rel="self" type="application/rss+xml"/><description>Announcement</description><generator>Wowchemy (https://wowchemy.com)</generator><language>ja-jp</language><lastBuildDate>Sun, 01 Oct 2023 00:00:00 +0000</lastBuildDate><image><url>https://confluent-jp.github.io/community/media/icon_hubade5daff97c80353b10ab16b141ee15_5385_512x512_fill_lanczos_center_3.png</url><title>Announcement</title><link>https://confluent-jp.github.io/community/category/announcement/</link></image><item><title>Confluent Cloud Q3'23 Launch</title><link>https://confluent-jp.github.io/community/blog/confluent-cloud-23q3-launch/</link><pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate><guid>https://confluent-jp.github.io/community/blog/confluent-cloud-23q3-launch/</guid><description>&lt;p>Confluent Cloudはマネージドのプラットフォーム提供である為、様々な機能追加や改善は自動的に適用されます。これら改善はコアであるApache Kafkaのバージョンアップに限らず、またプラットフォーム製品であるConfluent Platformの機能にも限定されず、Confluent Cloud独自の機能も様々追加されています。&lt;/p>
&lt;p>Quarterly Launchは、そんなConfluent Cloudの新規機能を四半期毎にまとめてご紹介する&lt;a href="https://www.confluent.io/blog/build-deploy-consume-data-pipelines/" target="_blank" rel="noopener">ブログ&lt;/a>と&lt;a href="https://www.youtube.com/watch?v=TS00diWO5Ak" target="_blank" rel="noopener">YouTube&lt;/a>エントリを指します。今回は&lt;a href="https://www.confluent.io/events/current/" target="_blank" rel="noopener">Current 2023&lt;/a>の開催を待った為だいぶ遅くなってしまいましたが、改めてそのハイライトをご紹介します。&lt;/p>
&lt;h3 id="apache-flink-on-confluent-cloud-open-previewhttpswwwconfluentioblogbuild-deploy-consume-data-pipelinesflink-on-cloud">&lt;a href="https://www.confluent.io/blog/build-deploy-consume-data-pipelines/#flink-on-cloud" target="_blank" rel="noopener">Apache Flink® on Confluent Cloud (Open Preview)&lt;/a>&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="Flink on Confluent Cloud" srcset="
/community/media/blogs/confluent-cloud-23Q3-launch/flink-on-confluent-cloud_hu9a7990cce7b4fd1d129d17a5ccb1fd92_42892_1e22c54f68065fddec3fa2ce7b9ed953.webp 400w,
/community/media/blogs/confluent-cloud-23Q3-launch/flink-on-confluent-cloud_hu9a7990cce7b4fd1d129d17a5ccb1fd92_42892_0bffbec27941e3f486699fef8632a7a8.webp 760w,
/community/media/blogs/confluent-cloud-23Q3-launch/flink-on-confluent-cloud_hu9a7990cce7b4fd1d129d17a5ccb1fd92_42892_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://confluent-jp.github.io/community/community/media/blogs/confluent-cloud-23Q3-launch/flink-on-confluent-cloud_hu9a7990cce7b4fd1d129d17a5ccb1fd92_42892_1e22c54f68065fddec3fa2ce7b9ed953.webp"
width="600"
height="315"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
来年サービス提供開始予定のApache Flink on Confluent Cloudがオープンプレビューとして公開されました。提供インターフェースはFlink SQLのみ。現時点では&lt;a href="https://docs.confluent.io/cloud/current/flink/reference/op-supported-features-and-limitations.html#feature-limitations" target="_blank" rel="noopener">既知の機能制限&lt;/a>があり、この為本番利用には向きません。また現時点で&lt;a href="https://docs.confluent.io/cloud/current/flink/reference/op-supported-features-and-limitations.html#cloud-regions" target="_blank" rel="noopener">利用可能なクラウド/リージョン&lt;/a>は限定的ではあります。ただ、今日もうお試しいただけます。&lt;/p>
&lt;h3 id="enterprise-clustershttpswwwconfluentioblogbuild-deploy-consume-data-pipelinesenterprise-clusters">&lt;a href="https://www.confluent.io/blog/build-deploy-consume-data-pipelines/#enterprise-clusters" target="_blank" rel="noopener">Enterprise clusters&lt;/a>&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="Enterprise Clusters" srcset="
/community/media/blogs/confluent-cloud-23Q3-launch/enterprise-clusters_hudcb5501b6a71e95e8db9e97022c961b4_156794_2d533c3cc14f04ebba6beda84afd4b62.webp 400w,
/community/media/blogs/confluent-cloud-23Q3-launch/enterprise-clusters_hudcb5501b6a71e95e8db9e97022c961b4_156794_2108090c6b8fd26c6bbd9d7601804391.webp 760w,
/community/media/blogs/confluent-cloud-23Q3-launch/enterprise-clusters_hudcb5501b6a71e95e8db9e97022c961b4_156794_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://confluent-jp.github.io/community/community/media/blogs/confluent-cloud-23Q3-launch/enterprise-clusters_hudcb5501b6a71e95e8db9e97022c961b4_156794_2d533c3cc14f04ebba6beda84afd4b62.webp"
width="760"
height="380"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
Confluent Cloudのサーバーレスなクラスタ提供に新たにEnterpriseというオプションが追加されました。Basic、Standardといった既存のサーバーレスクラスタと異なり閉塞ネットワーク接続&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>を可能としており、併せて標準でSLA 99.99%、最大1GBpsのスループット(Ingress/Egress合算)をサポートしています。&lt;/p>
&lt;p>残念ながらローンチ時点ではサポートされているリージョンは限定的&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>ですが、以降継続して拡張予定となっています。&lt;/p>
&lt;h3 id="confluent-terraform-provider-updateshttpswwwconfluentioblogbuild-deploy-consume-data-pipelinesconfluent-terraform-provider">&lt;a href="https://www.confluent.io/blog/build-deploy-consume-data-pipelines/#confluent-terraform-provider" target="_blank" rel="noopener">Confluent Terraform provider updates&lt;/a>&lt;/h3>
&lt;p>Confluent Terraform ProviderがHashiCorp Sentinel統合をサポートしました。これによりPolicy-as-Codeによる運用にConfluent Cloudを統合することが可能となります。&lt;/p>
&lt;p>また、新たにResource Importer機能を提供開始しました。これにより既存のConfluent CloudからTerraformの構成 (main.tf) ならびに状態 (terraform.tfstate) を逆生成する事が可能となります。&lt;/p>
&lt;h3 id="その他">その他&lt;/h3>
&lt;ul>
&lt;li>先日発表した&lt;a href="../confluent-platform-7.5-announcement/">Confluent Platform 7.5&lt;/a>でもご紹介した双方向Cluster LinkingがConfluent Cloudでもサポートされております。&lt;/li>
&lt;li>PrivateLink接続のConfluent Cloudクラスタ同士を&lt;a href="https://docs.confluent.io/cloud/current/multi-cloud/cluster-linking/private-networking.html" target="_blank" rel="noopener">直接Cluster Linkingで接続可能&lt;/a>することが可能となりました。&lt;/li>
&lt;/ul>
&lt;p>その他にも新たな機能が追加されておりますが、その全貌ならびに個々の詳細につきましては&lt;a href="https://www.confluent.io/blog/build-deploy-consume-data-pipelines/" target="_blank" rel="noopener">Confluentブログのアナウンスメント&lt;/a>をご覧ください。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>2023年9月ローンチ時点では、AWS PrivateLink経由の接続のみサポートしております。その他クラウドの接続形態は後日提供となります。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>2023年9月ローンチ時点では、AWSのus-east-2(Ohio)、us-west-2(Oregon)、ap-southeast-1(Singapore)等8リージョンでのみ提供開始となっています。日本リージョンでの利用開始は現時点では未定です。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Confluent Platform 7.5リリース</title><link>https://confluent-jp.github.io/community/blog/confluent-platform-7.5-announcement/</link><pubDate>Thu, 31 Aug 2023 00:00:00 +0000</pubDate><guid>https://confluent-jp.github.io/community/blog/confluent-platform-7.5-announcement/</guid><description>&lt;p>Confluent Platform 7.5がリリースされました。 &lt;a href="https://www.confluent.io/blog/introducing-confluent-platform-7-5/" target="_blank" rel="noopener">Confluent Blog&lt;/a> 内包されるApache Kafkaのバージョンは&lt;a href="https://www.youtube.com/watch?v=BVxDFL5iTx8" target="_blank" rel="noopener">3.5&lt;/a>となります。&lt;/p>
&lt;p>コアエンジンであるApache Kafkaのアップグレードだけでなく、エンタープライズ ソリューションとしてのConfluent Platformとしての機能追加や改善も含まれています。&lt;/p>
&lt;h3 id="sso-for-control-center-c3-for-confluent-platform">SSO for Control Center (C3) for Confluent Platform&lt;/h3>
&lt;p>Confluent Control CenterはConfluent Platformにおける管理ポータルとしての役割から、ごく一部のSREメンバーからのみアクセスされるという特殊なコンポーネントです。この為これまではアクセス制御のアプローチについては少し限定的でしたが、Broker等と同様OAuth2ベースの認証/認可の方法でアクセスする事が可能となりました。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="OIDC SSO to Conntrol Center" srcset="
/community/media/blogs/confluent-platform-7.5-announcement/sso_hu67db87b51405a1db647394d2cb092ba4_138944_003085067e9660f4d2a75d91d83a2c4c.webp 400w,
/community/media/blogs/confluent-platform-7.5-announcement/sso_hu67db87b51405a1db647394d2cb092ba4_138944_1ba41c13ea805b6d452f9ea265a8d6d8.webp 760w,
/community/media/blogs/confluent-platform-7.5-announcement/sso_hu67db87b51405a1db647394d2cb092ba4_138944_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://confluent-jp.github.io/community/community/media/blogs/confluent-platform-7.5-announcement/sso_hu67db87b51405a1db647394d2cb092ba4_138944_003085067e9660f4d2a75d91d83a2c4c.webp"
width="760"
height="349"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="confluent-rest-proxy-produce-api-v3">Confluent REST Proxy Produce API v3&lt;/h3>
&lt;p>Confluent REST ProxyはKafka BrokerへのRESTベースのアクセスを可能としており、Confluent Platform/Cloudの双方で幅広く活用されています。一方、通常のKafkaプロトコルベースのアクセスに比べると制限もあり、これまでも段階的に改善がなされています。今回のProduce API v3では：&lt;/p>
&lt;ul>
&lt;li>カスタムヘッダーの追加 (トレーシングID、等)&lt;/li>
&lt;li>KeyとValueで異なるシリアライザの設定&lt;/li>
&lt;/ul>
&lt;p>が可能となります。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="REST Proxy Produce API v3" srcset="
/community/media/blogs/confluent-platform-7.5-announcement/rest-proxy-produce-v3_hue84c4db39461140502f9bf10a6ad3c39_107527_83989a5797af7fe63286be6fe5bcda60.webp 400w,
/community/media/blogs/confluent-platform-7.5-announcement/rest-proxy-produce-v3_hue84c4db39461140502f9bf10a6ad3c39_107527_a2df8c6c08019d4a0d21e3f2b3a29d54.webp 760w,
/community/media/blogs/confluent-platform-7.5-announcement/rest-proxy-produce-v3_hue84c4db39461140502f9bf10a6ad3c39_107527_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://confluent-jp.github.io/community/community/media/blogs/confluent-platform-7.5-announcement/rest-proxy-produce-v3_hue84c4db39461140502f9bf10a6ad3c39_107527_83989a5797af7fe63286be6fe5bcda60.webp"
width="760"
height="333"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="bidirectional-cluster-linking">Bidirectional Cluster Linking&lt;/h3>
&lt;p>双方向のCluster Linkingの設定が可能となりました。これまでも一方向のリンクを2本貼れば実際のレプリケーションを双方向にすることは可能でした。Consuemr観点ではローカルのTopicとMirror Topicそれぞれ個別のTopicを同時にConsumeするモデルであり、それぞれへのOffset Commitを実行します。この際、Mirror TopicへのOffset CommitはソースとなるTopicには反映されないので、障害時には部分的なConsumer Offset情報しか連携されていない状況となります。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="2 Unidirectional Cluster Linking" srcset="
/community/media/blogs/confluent-platform-7.5-announcement/uni-directional-cluster-linking-offset_huc479c2906f04f32b878c3e28e716f33e_62357_a7ec30fb3db45ac5c6af35290b9d3c04.webp 400w,
/community/media/blogs/confluent-platform-7.5-announcement/uni-directional-cluster-linking-offset_huc479c2906f04f32b878c3e28e716f33e_62357_034036236e3424798a84919e80a03245.webp 760w,
/community/media/blogs/confluent-platform-7.5-announcement/uni-directional-cluster-linking-offset_huc479c2906f04f32b878c3e28e716f33e_62357_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://confluent-jp.github.io/community/community/media/blogs/confluent-platform-7.5-announcement/uni-directional-cluster-linking-offset_huc479c2906f04f32b878c3e28e716f33e_62357_a7ec30fb3db45ac5c6af35290b9d3c04.webp"
width="760"
height="420"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
双方向のCluster Linkingは双方向へのリンクが1セットとして扱われる為、双方のクラスタでのOffset Commit情報も合わせて同期されます。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="Bidirectional Cluster Linking" srcset="
/community/media/blogs/confluent-platform-7.5-announcement/bidirectional-cluster-linking-cp-7-5_hu3a52438f693c3a662eb31fd1fd393da7_114667_83366575928d4eb4fc54ae197fca70b1.webp 400w,
/community/media/blogs/confluent-platform-7.5-announcement/bidirectional-cluster-linking-cp-7-5_hu3a52438f693c3a662eb31fd1fd393da7_114667_bf7aca812d06fb55ea4bd64298312a51.webp 760w,
/community/media/blogs/confluent-platform-7.5-announcement/bidirectional-cluster-linking-cp-7-5_hu3a52438f693c3a662eb31fd1fd393da7_114667_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://confluent-jp.github.io/community/community/media/blogs/confluent-platform-7.5-announcement/bidirectional-cluster-linking-cp-7-5_hu3a52438f693c3a662eb31fd1fd393da7_114667_83366575928d4eb4fc54ae197fca70b1.webp"
width="760"
height="339"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.confluent.io/blog/introducing-confluent-platform-7-5/" target="_blank" rel="noopener">Introducing Confluent Platform 7.5 (Confluent Blog)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.confluent.io/platform/7.5/release-notes/index.html" target="_blank" rel="noopener">Confluent Platform 7.5 Release Notes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.confluent.io/platform/current/kafka-rest/index.html" target="_blank" rel="noopener">REST Proxy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.confluent.io/platform/7.5/control-center/security/sso/overview.html#sso-for-c3" target="_blank" rel="noopener">Single Sign-On (SSO) for Confluent Control Center&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.confluent.io/cloud/current/multi-cloud/cluster-linking/cluster-links-cc.html#bidirectional-mode" target="_blank" rel="noopener">Cluster Linking - Bidirectional Mode&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>新コース - Event Modeling</title><link>https://confluent-jp.github.io/community/blog/developer-io-event-modeling/</link><pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate><guid>https://confluent-jp.github.io/community/blog/developer-io-event-modeling/</guid><description>&lt;p>&lt;a href="developer.confluent.io">developer.confluent.io&lt;/a>にてEvent Modelingに関する新しいコースが発表されました。Event Modelingは情報システムのヴィジュアルデザイン手法で、システム間の非同期通信に利用されるイベントをblueprintという成果物を作成する形で設計します。&lt;/p>
&lt;p>UXやドメイン駆動設計と強い繋がりを持ち、複数人によるコラボレーションをビジュアルツールを使って設計するという点が特徴です。目的や手法は少し異なりますが、Alberto Brandoliniによる&lt;a href="https://www.eventstorming.com/" target="_blank" rel="noopener">Event Sourcing&lt;/a>と近い思想によるデザイン手法の一つです。&lt;/p>
&lt;p>マイクロサービスにおけるイベント駆動設計とは特に親和性の高い設計アプローチではないかと思います。&lt;/p></description></item></channel></rss>