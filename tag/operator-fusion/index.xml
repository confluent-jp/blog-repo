<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Operator Fusion | Confluent Japan Community</title><link>https://confluent-jp.github.io/community/tag/operator-fusion/</link><atom:link href="https://confluent-jp.github.io/community/tag/operator-fusion/index.xml" rel="self" type="application/rss+xml"/><description>Operator Fusion</description><generator>Wowchemy (https://wowchemy.com)</generator><language>ja-jp</language><lastBuildDate>Mon, 30 Oct 2023 00:00:00 +0000</lastBuildDate><image><url>https://confluent-jp.github.io/community/media/icon_hubade5daff97c80353b10ab16b141ee15_5385_512x512_fill_lanczos_center_3.png</url><title>Operator Fusion</title><link>https://confluent-jp.github.io/community/tag/operator-fusion/</link></image><item><title>Apache Flink 1.18 アップデート</title><link>https://confluent-jp.github.io/community/blog/apache-flink-1.8/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://confluent-jp.github.io/community/blog/apache-flink-1.8/</guid><description>&lt;p>Apache Flinkの新バージョン1.18が公開されました。&lt;a href="https://www.confluent.io/blog/announcing-apache-flink-1-18/" target="_blank" rel="noopener">Conflunet Blog&lt;/a>ではその具体的な改善点をエリア毎に詳しく説明しており、ConfluentだけでなくVerverica、Aiven、Alibaba CloudのFlinkコミッターも共著として参加し、結果としてFlinkの情報発信として非常に有益なものとなっています。&lt;/p>
&lt;p>昨年発表されたAkkaのライセンス変更に伴い、&lt;a href="https://flink.apache.org/2022/09/08/regarding-akkas-licensing-change/" target="_blank" rel="noopener">1年前にAkkaの代替模索に入った&lt;/a>Flinkプロジェクト。ようやくAkkaから&lt;a href="https://pekko.apache.org/" target="_blank" rel="noopener">Apache Pekko&lt;/a>に切り替えた節目のリリースとなりました。&lt;/p>
&lt;p>併せて、ストリーム処理/バッチ処理改善等Flinkのストリーム処理基盤としての成熟度がさらに増す多くの改善も含まれています。本エントリでは、一部ではありますがそのうちの幾つかをご紹介します。&lt;/p>
&lt;h3 id="flip-293-introduce-flink-jdbc-driver-for-sql-gatewayhttpscwikiapacheorgconfluencedisplayflinkflip-2933aintroduceflinkjdbcdriverforsqlgateway">&lt;a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-293%3A&amp;#43;Introduce&amp;#43;Flink&amp;#43;Jdbc&amp;#43;Driver&amp;#43;For&amp;#43;Sql&amp;#43;Gateway" target="_blank" rel="noopener">FLIP-293: Introduce Flink Jdbc Driver For Sql Gateway&lt;/a>&lt;/h3>
&lt;p>FlinkクラスタへのRESTエンドポイントを提供する&lt;a href="https://github.com/ververica/flink-sql-gateway/blob/master/README.md" target="_blank" rel="noopener">Flink SQL Ga†eway&lt;/a>に、新たに汎用的なJDBC経由で通信できる&lt;a href="https://github.com/ververica/flink-jdbc-driver" target="_blank" rel="noopener">Flink JDBC Driver&lt;/a>が接続出来るようになりました。&lt;/p>
&lt;p>これまでSQL Gatewayにはコンソールベースでのアクセスは可能でしたが、セッションを保持したアプリケーションからのアクセスは出来ませんでした。一方JDBC Driverの基本利用はFlink Jobの登録にあり、インタラクティブなクエリはサポートされていませんでした。本FLIPによりこの2者を繋げ、SQL Gateway経由でJDBC接続が可能な多くのデータベースに対してJDBC Driverから接続出来るようになりました。&lt;/p>
&lt;h3 id="flip-311-support-call-stored-procedurehttpscwikiapacheorgconfluencedisplayflinkflip-3113asupportcallstoredprocedure">&lt;a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-311%3A&amp;#43;Support&amp;#43;Call&amp;#43;Stored&amp;#43;Procedure" target="_blank" rel="noopener">FLIP-311: Support Call Stored Procedure&lt;/a>&lt;/h3>
&lt;p>これまでFlinkから見たデータソースはSourceでありSinkであり、あくまでデータストアという扱いにおける接続に限られました。本FLIPによってFlinkからStored Procedureの一覧取得と実行が可能となります。&lt;/p>
&lt;p>Stored Procedure実行におけるインターフェース変更に合わせ、&lt;a href="https://nightlies.apache.org/flink/flink-docs-master/api/java/org/apache/flink/table/catalog/Catalog.html" target="_blank" rel="noopener">Catalog Interface&lt;/a>にもStored Procedure用のメソッドが追加されており一覧の取得も可能です。&lt;/p>
&lt;h3 id="flip-308-support-time-travelhttpscwikiapacheorgconfluencedisplayflinkflip-3083asupporttimetravel">&lt;a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-308%3A&amp;#43;Support&amp;#43;Time&amp;#43;Travel" target="_blank" rel="noopener">FLIP-308: Support Time Travel&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/SQL:2011" target="_blank" rel="noopener">SQL:2011 Standard&lt;/a>のTime Travel Queryがサポートされます。どちらもSQL:2011標準であるようタイムスタンプでの指定となりますが、特定時点ならびに期間指定がサポートされます。&lt;/p>
&lt;p>用途としてはデータレイクに長期格納しているデータに対してFlinkからソースアタッチする際に特定の過去時点でのデータも同様の方法で取得可能となります。IcebergやDelta Lake等、Time Travel Queryをサポートしているストレージに限られた機能となり、またConnectorが新しいインターフェースに沿って実装する必要があります。&lt;/p>
&lt;h3 id="flip-292-enhance-compiled-plan-to-support-operator-level-state-ttl-configurationhttpscwikiapacheorgconfluencedisplayflinkflip-2923aenhancecompiledplantosupportoperator-levelstatettlconfiguration">&lt;a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-292%3A&amp;#43;Enhance&amp;#43;COMPILED&amp;#43;PLAN&amp;#43;to&amp;#43;support&amp;#43;operator-level&amp;#43;state&amp;#43;TTL&amp;#43;configuration" target="_blank" rel="noopener">FLIP-292: Enhance COMPILED PLAN to support operator-level state TTL configuration&lt;/a>&lt;/h3>
&lt;p>Table APIやSQLを利用してステートフルなストリームパイプラインを構築する際の、ステート管理に関わる改善です。JOINをしたり同じTableデータに異なる条件で集約したりする場合に、そのステートのベースとなるイベントの有効期間 (TTL: Time To Live) の制御によっては処理の対象となるイベントが変わります。&lt;/p>
&lt;p>本FLIPでは、それぞれの対象ソースに対して個別のTTLを設定出来るようになります。これにより要件に即したステート管理を行うことができるようになります。より粒度の細かなスコープの指定や、特定ユースケースにおけるステートストアの大幅な削減等が可能です。&lt;/p>
&lt;h3 id="flip-296-extend-watermark-related-features-for-sqlhttpscwikiapacheorgconfluencedisplayflinkflip-2963aextendwatermark-relatedfeaturesforsql">&lt;a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-296%3A&amp;#43;Extend&amp;#43;watermark-related&amp;#43;features&amp;#43;for&amp;#43;SQL" target="_blank" rel="noopener">FLIP-296: Extend watermark-related features for SQL&lt;/a>&lt;/h3>
&lt;p>ストリーム処理においてデータの整合性をいかに評価/制御することは極めて重要ですが、Flinkでは&lt;a href="https://www.youtube.com/watch?v=sdhwpUAjqaI" target="_blank" rel="noopener">Event TimeとWatermark&lt;/a>を利用する事により明示的にそれぞれのデータ処理ウィンドウを決定しています。&lt;/p>
&lt;p>Watermarkはその振る舞いを制御する重要な仕組みであり、&lt;a href="https://nightlies.apache.org/flink/flink-docs-release-1.18/docs/dev/datastream/overview/" target="_blank" rel="noopener">DataStream API&lt;/a>であればその&lt;a href="https://nightlies.apache.org/flink/flink-docs-master/docs/dev/datastream/event-time/generating_watermarks/#watermark-alignment" target="_blank" rel="noopener">関連性の定義を制御(Watermark Alignment)&lt;/a>する事も出来ました。但しWatermarkの制御をする為にはローレベルなDataStream APIを利用する必要がありました。&lt;/p>
&lt;p>本FLIPでは、Flink SQLによってその制御を可能とします。具体的にはTable作成時やクエリにアノテーションを指定する事で：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_actions&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">user_action_time&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TIMESTAMP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">WATERMARK&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_action_time&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_action_time&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INTERVAL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;5&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SECOND&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;scan.watermark.emit.strategy&amp;#39;&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;on-event&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>とWatermark生成インターバルを指定したり：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">source_table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cm">/*+ OPTIONS(&amp;#39;scan.watermark.emit.strategy&amp;#39;=&amp;#39;on-event&amp;#39;) */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>SELECT時にWatermarkの出力タイプを指定できます。&lt;/p>
&lt;h3 id="バッチ処理速度改善">バッチ処理速度改善&lt;/h3>
&lt;p>&lt;a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-324%3A&amp;#43;Introduce&amp;#43;Runtime&amp;#43;Filter&amp;#43;for&amp;#43;Flink&amp;#43;Batch&amp;#43;Jobs" target="_blank" rel="noopener">FLIP-324: Introduce Runtime Filter for Flink Batch Jobs&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-315&amp;#43;Support&amp;#43;Operator&amp;#43;Fusion&amp;#43;Codegen&amp;#43;for&amp;#43;Flink&amp;#43;SQL" target="_blank" rel="noopener">FLIP-315 Support Operator Fusion Codegen for Flink SQL&lt;/a>&lt;/p>
&lt;p>全バージョン(Flink 1.17)ではバッチ処理におけるスループットが大きく改善しました。その改善は本リリースでも継続して行われており、さらにそのパフォーマンスが向上しています 。今回のリリースにおける主要な改善は：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>FLIP-324&lt;/strong> &lt;a href="https://www.alibabacloud.com/blog/query-performance-optimization-runtime-filter_598126" target="_blank" rel="noopener">Runtime Filter&lt;/a>は集約処理の前段階で対象レコードを絞るアプローチで、これにより集約やJoinにかかるネットワーク通信や必要処理の大規模化を削減する事ができます。このFLIPでは、クエリのプラン中に関連処理の中からローカルでの集約可能な処理を特定し、Runtime Filterとして実行するようになりました。&lt;/li>
&lt;li>&lt;strong>FLIP-315&lt;/strong> 利用可能メモリの増加からCPUの処理能力にボトルネックが移る中、処理プロセスにおける無駄が全体スループットに大きな影響を与えています。幾つかの改善ポイントを評価した結果、ベクター化とコード生成方式のうちコード生成方式の&lt;a href="https://www.vldb.org/pvldb/vol4/p539-neumann.pdf" target="_blank" rel="noopener">Operator Fusion&lt;/a>の実装を導入しました。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="TPC-DS ベンチマーク結果" srcset="
/community/media/blogs/apache-flink-1.8/tpc-ds-benchmark-on-10t_huae35da9ece75da945f72ec115698b87c_979460_63116ec5b524eace18e376eece97e72f.webp 400w,
/community/media/blogs/apache-flink-1.8/tpc-ds-benchmark-on-10t_huae35da9ece75da945f72ec115698b87c_979460_f70905be7f3875dac26b79cb80bf7b1c.webp 760w,
/community/media/blogs/apache-flink-1.8/tpc-ds-benchmark-on-10t_huae35da9ece75da945f72ec115698b87c_979460_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://confluent-jp.github.io/community/community/media/blogs/apache-flink-1.8/tpc-ds-benchmark-on-10t_huae35da9ece75da945f72ec115698b87c_979460_63116ec5b524eace18e376eece97e72f.webp"
width="760"
height="529"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
結果として&lt;a href="https://www.tpc.org/tpcds/" target="_blank" rel="noopener">TPC-DS&lt;/a>のベンチマーク結果がFlink 1.17と比べて13%、1.16とでは35%改善しました。&lt;/p>
&lt;h3 id="おわりに">おわりに&lt;/h3>
&lt;p>今回のご紹介はApache Flink1.18で導入された新機能や改善のごく一部ではありますが、ストリーム処理からバッチ、クラウドネイティブ化に向けた改善等、非常に多岐に渡る改善が含まれています。ksqlDBを知る身としてはFlinkの分散データ処理基盤としての重厚さを感じることにもなりました。是非&lt;a href="https://www.confluent.io/blog/announcing-apache-flink-1-18/" target="_blank" rel="noopener">オリジナルのブログ&lt;/a>もご覧ください。&lt;/p></description></item></channel></rss>