<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kafka Connect | Confluent Japan Community</title><link>https://confluent-jp.github.io/community/tag/kafka-connect/</link><atom:link href="https://confluent-jp.github.io/community/tag/kafka-connect/index.xml" rel="self" type="application/rss+xml"/><description>Kafka Connect</description><generator>Wowchemy (https://wowchemy.com)</generator><language>ja-jp</language><lastBuildDate>Thu, 12 Oct 2023 00:00:00 +0000</lastBuildDate><image><url>https://confluent-jp.github.io/community/media/icon_hubade5daff97c80353b10ab16b141ee15_5385_512x512_fill_lanczos_center_3.png</url><title>Kafka Connect</title><link>https://confluent-jp.github.io/community/tag/kafka-connect/</link></image><item><title>Apache Kafka 3.6 アップデート</title><link>https://confluent-jp.github.io/community/blog/apache-kafka-3.6/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://confluent-jp.github.io/community/blog/apache-kafka-3.6/</guid><description>&lt;p>Apache Kafkaの新バージョン3.6が公開されました。
ZookeeperモードからKRaftモードへの移行ではありますが、KRaftの強化だけでなく新たな機能も多く追加されております。詳細は&lt;a href="https://www.confluent.io/blog/introducing-apache-kafka-3-6/" target="_blank" rel="noopener">Confluentのアナウンスメント&lt;/a>と&lt;a href="https://www.youtube.com/watch?v=GW3625sEJyc" target="_blank" rel="noopener">YouTube&lt;/a>で説明されています。より詳細には&lt;a href="https://kafka.apache.org/blog#apache_kafka_360_release_announcement" target="_blank" rel="noopener">本家のリリースノート&lt;/a>には全ての関連kIPのリストが公開されています。&lt;/p>
&lt;p>本エントリでは、中でも重要なKIPについてご紹介します。&lt;/p>
&lt;h3 id="kip-405-kafka-tiered-storage-early-accesshttpscwikiapacheorgconfluencedisplaykafkakip-4053akafkatieredstorage">&lt;a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-405%3A&amp;#43;Kafka&amp;#43;Tiered&amp;#43;Storage" target="_blank" rel="noopener">KIP-405: Kafka Tiered Storage (Early Access)&lt;/a>&lt;/h3>
&lt;p>&lt;a href="../kip405-why-tiered-storage-important/">こちらのブログエントリ&lt;/a>でもご紹介していたTiered Storageがアーリーアクセスとして利用可能となりました。単純に古いセグメントがオブジェクトストレージに退避されるだけでなく、既存のKafkaの設計やパフォーマンスへの影響を与えずに、Kafka自身がよりクラウドネイティブな姿へと変わる上で重要な機能です。&lt;/p>
&lt;p>今回3.6に登場したバージョンはまだ本番環境における利用を想定していない旨にご留意ください。機能の安定性だけでなく、JBODやCompacted Topic等機能制限もあります。既存Topicもバージョンを3.6にアップグレードすればTiered Storageに変更出来ますが、2.8.0より前に作成されたTopicには適用出来ない点もご注意下さい。アーリーアクセス版の制限はこちらの&lt;a href="https://cwiki.apache.org/confluence/display/KAFKA/Kafka&amp;#43;Tiered&amp;#43;Storage&amp;#43;Early&amp;#43;Access&amp;#43;Release&amp;#43;Notes" target="_blank" rel="noopener">Tiered Storage アーリーアクセスリリースノート&lt;/a>に記載されています。&lt;/p>
&lt;h3 id="kip-868-metadata-transactionshttpscwikiapacheorgconfluencedisplaykafkakip-868metadatatransactions">&lt;a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-868&amp;#43;Metadata&amp;#43;Transactions" target="_blank" rel="noopener">KIP-868 Metadata Transactions&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://developer.confluent.io/learn/kraft/" target="_blank" rel="noopener">KRaft&lt;/a>の内部処理に関する改善です。KRaftではメタデータの更新時に関連レコード (例：Topic登録時の全Partitionのレコード) をアトミックに更新する仕様となっています。この為Controllerが処理中に障害に陥った場合でも部分的なメタデータの更新がなされないようになっています。&lt;/p>
&lt;p>一方このバッチサイズはKRaftのフェッチサイズが上限となっており、アップデート前ではこのサイズは8kbとなっています。この為非常に大きなメタデータの更新時にはフェッチ上限を超えるバッチが生成される可能性がありました。&lt;/p>
&lt;p>この改善で新たにメタデータにトランザクションの概念が導入され、トランザクションの開始/終了等のマーカーレコードを挿入するようになります。これによりKRaftのフェッチサイズを超える更新バッチサイズになった場合でも処理が可能となります。&lt;/p>
&lt;h3 id="kip-941-range-queries-to-accept-null-lower-and-upper-boundshttpscwikiapacheorgconfluencedisplaykafkakip-9413arangequeriestoacceptnulllowerandupperbounds">&lt;a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-941%3A&amp;#43;Range&amp;#43;queries&amp;#43;to&amp;#43;accept&amp;#43;null&amp;#43;lower&amp;#43;and&amp;#43;upper&amp;#43;bounds" target="_blank" rel="noopener">KIP-941: Range queries to accept null lower and upper bounds&lt;/a>&lt;/h3>
&lt;p>Kafka StreamsにてマテリアライズしたState Storeに対してアクセスするには&lt;a href="https://docs.confluent.io/platform/current/streams/developer-guide/interactive-queries.html" target="_blank" rel="noopener">Interactive Query&lt;/a>を利用します。これにより、アクセスするデータが分散配置されているKafka Streamsのどのインスタンスにて保存されているのかを意識せずとも適切なデータを取得する事が出来ます。&lt;/p>
&lt;p>一方内部ではそれぞれのデータはKafka Streamsインスタンスに部分的に保存されている為、レンジ指定をして取得する場合には処理に大きな負荷がかかります。この為レンジ指定のクエリは制限が多く、アップデート前ではnullを指定した取得が出来ませんでした。この為：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RangeQuery&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ValueAndTimestamp&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StockTransactionAggregation&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">createRangeQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">isBlank&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">isBlank&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RangeQuery&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">withNoBounds&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">isBlank&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">isBlank&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RangeQuery&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">withLowerBound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">isBlank&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">isBlank&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RangeQuery&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">withUpperBound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RangeQuery&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">withRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このような回避的なコーディングが必要でした。&lt;/p>
&lt;p>今回レンジクエリにnull指定が出来るようになった事により：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">RangeQuery&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">withRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これだけでnullを回避した実装が可能となります。&lt;/p>
&lt;h3 id="kip-875-first-class-offsets-support-in-kafka-connecthttpscwikiapacheorgconfluencedisplaykafkakip-8753afirst-classoffsetssupportinkafkaconnect">&lt;a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-875%3A&amp;#43;First-class&amp;#43;offsets&amp;#43;support&amp;#43;in&amp;#43;Kafka&amp;#43;Connect" target="_blank" rel="noopener">KIP-875: First-class offsets support in Kafka Connect&lt;/a>&lt;/h3>
&lt;p>Kafka Connectはその処理状況をKafkaネイティブにオフセットを管理する事により把握/管理しています。Connectorタスクが異常終了した場合でも、コミットされたオフセットを元に継続処理できるので、Connector自身には独自のステート管理のストレージ等が無くとも障害耐性を確保する事が出来ています。&lt;/p>
&lt;p>一方このオフセットはKafka上では参照できるもののKafka Connectとしては外部からアクセス出来るようにはなっていませんでした。何かしらの理由でオフセットを制御したい（特定レコードレンジを飛ばしたい、あるオフセットから再読み込みしたい、etc）場合にはハック的にKafka上のオフセット用Topicをいじる必要がありました。&lt;/p>
&lt;p>この改善によってKafka Connect API経由でオフセットの取得、更新、削除が可能となります。&lt;/p>
&lt;h3 id="おわりに">おわりに&lt;/h3>
&lt;p>Apache Kafka 3.6にはその他多くの改善が含まれています。今回のエントリではその一部しか触れていませんが、是非本家の&lt;a href="https://kafka.apache.org/blog#apache_kafka_360_release_announcement" target="_blank" rel="noopener">リリースノート&lt;/a>も併せてご参照ください。&lt;/p></description></item><item><title>Apache Kafka®️ and Modernization - How Old Data Meets New Data</title><link>https://confluent-jp.github.io/community/talk/20221025-yugabytedb-japan-hour/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://confluent-jp.github.io/community/talk/20221025-yugabytedb-japan-hour/</guid><description/></item><item><title>Kafka: The Definitive Guide</title><link>https://confluent-jp.github.io/community/publication/kafka-the-definitive-guide/</link><pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate><guid>https://confluent-jp.github.io/community/publication/kafka-the-definitive-guide/</guid><description/></item></channel></rss>